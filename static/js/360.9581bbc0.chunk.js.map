{"version":3,"file":"static/js/360.9581bbc0.chunk.js","mappings":"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","sources":["components/ui/Button.styled.js","components/ui/Container.styled.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.jsx","components/Filter/Input.styled.js","components/Filter/Filter.jsx","views/ContactsView.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  cursor: pointer;\n  height: 25px;\n  border: none;\n  border-radius: 5px;\n  background-color: #15181a;\n  color: #e99797;\n  font-size: 16px;\n  width: 353px;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: #e99797;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormContainer = styled(Form)`\n  margin: 0 auto;\n  text-align: center;\n  font-size: 18px;\n  background-color: #cec1df2e;\n  border: 1px solid;\n  border-radius: 5px;\n  width: 400px;\n  padding: 20px;\n`;\n\nexport const InputForm = styled(Field)`\n  display: block;\n  margin: 10px auto;\n  width: 300px;\n  height: 20px;\n  border: 1px solid;\n  border-radius: 5px;\n  padding: 3px;\n  background-color: #cec1df2e;\n  color: #e99797;\n`;\n","import { nanoid } from 'nanoid';\nimport { Button } from '../ui/Button.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations } from 'store/contacts';\nimport { getContacts } from 'store/contacts/contacts-selectors';\nimport { FormContainer, InputForm } from './ContactForm.styled';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    formSubmitHendler(values);\n    resetForm();\n  };\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Please, enter your name.'),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Please, enter your number.'),\n  });\n\n  const formSubmitHendler = ({ name, number }) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const normalizedName = contact.name.toLowerCase();\n    contacts.find(contact => contact.name.toLowerCase() === normalizedName)\n      ? toast.error(`${name} is already in contacts`)\n      : dispatch(contactsOperations.add({ id: nanoid(), name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContainer>\n        <label htmlFor=\"name\">\n          Name\n          <InputForm type=\"text\" name=\"name\" required />\n          <ErrorMessage name=\"name\" component=\"p\" />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <InputForm type=\"tel\" name=\"number\" required />\n          <ErrorMessage name=\"number\" component=\"p\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormContainer>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin: 0 auto;\n  list-style: none;\n  padding: 20px;\n  height: 300px;\n  overflow-y: auto;\n  width: 400px;\n  border: 1px solid;\n  border-radius: 5px;\n  background-color: #cec1df2e;\n  ::-webkit-scrollbar {\n    width: 5px;\n    background-color: #cec1df2e;\n  }\n  ::-webkit-scrollbar-thumb {\n    background-color: #e99797;\n    border-radius: 9em;\n    box-shadow: inset 1px 1px 10px #cec1df2e;\n  }\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin-bottom: 10px;\n`;\n\nexport const ContactsText = styled.p`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n`;\n","import { ContactsList, ContactsItem, ContactsText } from './Contacts.styled';\nimport { Button } from '../ui/Button.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilterValue } from 'store/contacts/contacts-selectors';\nimport { contactsOperations } from 'store/contacts';\nimport { useEffect } from 'react';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n\n  useEffect(() => {\n    dispatch(contactsOperations.get());\n  }, [dispatch]);\n\n  const deleteContact = id => {\n    dispatch(contactsOperations.remove(id));\n  };\n\n  const getVisibleContacts = () => {\n    if (contacts) {\n      const filterContacts = contacts.filter(item =>\n        item.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return filterContacts;\n    }\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <ContactsList>\n      {contacts.length > 0 ? (\n        visibleContacts.map(({ id, name, number }) => (\n          <ContactsItem key={id}>\n            <ContactsText>{name}</ContactsText>\n            <ContactsText>{number}</ContactsText>\n            <Button onClick={() => deleteContact(id)}>Delete</Button>\n          </ContactsItem>\n        ))\n      ) : (\n        <p>Your phonebook is empty, please add some contacts.</p>\n      )}\n    </ContactsList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: block;\n  margin: 10px auto;\n  width: 300px;\n  height: 20px;\n  border: 1px solid;\n  border-radius: 5px;\n  padding: 3px;\n  background-color: #cec1df2e;\n  color: #e99797;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'store/contacts/contacts-selectors';\nimport { changeFilter } from 'store/contacts/contacts-slice';\nimport { Input } from './Input.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const changeFilterValue = e => {\n    const inputValue = e.target.value;\n    dispatch(changeFilter(inputValue));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={changeFilterValue} />\n    </label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { Contacts } from 'components/Contacts';\nimport { Filter } from 'components/Filter';\nimport { Container } from 'components/ui/Container.styled';\nimport { Helmet } from 'react-helmet';\n\nconst ContactsView = () => {\n  return (\n    <Container>\n      <Helmet>\n        <title>Contacts page</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n    </Container>\n  );\n};\n\nexport default ContactsView;\n"],"names":["Button","styled","Container","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormContainer","Form","InputForm","Field","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","schema","yup","shape","name","matches","required","number","formSubmitHendler","normalizedName","toLowerCase","find","contact","toast","contactsOperations","initialValues","validationSchema","onSubmit","values","resetForm","htmlFor","type","component","ContactsList","ContactsItem","ContactsText","Contacts","filter","getFilterValue","useEffect","visibleContacts","item","includes","getVisibleContacts","length","map","onClick","deleteContact","Input","Filter","value","onChange","e","inputValue","target","changeFilter","Helmet"],"sourceRoot":""}